generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Status {
  PENDING
  PASSED
  FAILED
}

enum PaymentStatus {
  UNPAID
  PAID
}

model Role {
  id        String    @id
  role_name String @unique @db.VarChar(50)

  account Account[]
}

model User {
  id        String @id @default(uuid())
  user_name String
  phone     String @unique
  vip       Int    @default(0)

  account   Account? @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId String?  @unique
  order     Order[]
}

model Shipper {
  id              String @id @default(uuid())
  shipper_name    String
  phone           String @unique
  deliveredOrders Int    @default(0)
  totalEarnings   Float  @default(0.0)

  account   Account? @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId String?  @unique
  orders    Order[]
}

model Admin {
  id         String   @id @default(uuid())
  admin_name String
  account    Account? @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId  String?  @unique
}

model Account {
  id       String @id
  password String
  roleId   String
  role     Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)

  user    User?
  admin   Admin?
  shipper Shipper?
}

model Product {
  id          String @id @default(cuid())
  name        String
  description String
  price       Float
  stock       Int
  category    String

  orderDetails OrderDetail[]
}

model Order {
  id            String        @id @default(cuid())
  createdAt     DateTime      @default(now())
  address       String
  status        Status        @default(PENDING)
  totalPrice    Float
  shippingFee   Float         @default(0)
  paymentStatus PaymentStatus @default(UNPAID)

  userId    String
  shipperId String?

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  shipper Shipper? @relation(fields: [shipperId], references: [id], onDelete: SetNull)

  orderDetails OrderDetail[]
}

model OrderDetail {
  id       String @id @default(cuid())
  quantity Int

  orderId   String
  productId String

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}
